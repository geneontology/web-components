/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { IRibbonGroup, IRibbonModel, IRibbonSubject } from "./globals/models";
import { Cam } from "./globals/@noctua.form";
export { IRibbonGroup, IRibbonModel, IRibbonSubject } from "./globals/models";
export { Cam } from "./globals/@noctua.form";
export namespace Components {
    /**
     * The Annotation Ribbon component summarizes [GO annotation](https://geneontology.org/docs/go-annotations/)
     * as a grid of cells. Each row in the grid (called "strips") represents a subject (typically a
     * gene), and each column represents a GO term. The color of each cell indicates the relative number
     * of GO annotations for that subject to the term or one of its descendants in the ontology
     * hierarchy. The columns are additionally grouped into categories which are visually separated in
     * the display.
     * When a cell is clicked, a table of annotations is displayed below the strips. The table shows the
     * details of the annotations for the selected subject and term.
     * For advanced use cases, the individual components of the ribbon can be used separately:
     * [strips](./annotation-ribbon-strips), [table](./annotation-ribbon-table).
     */
    interface GoAnnotationRibbon {
        /**
          * add a cell at the beginning of each row/subject to show all annotations
          * @default true
         */
        "addCellAll": boolean;
        /**
          * @default "annotation,annotations"
         */
        "annotationLabels": string;
        /**
          * @default "https://api.geneontology.org/api/ontology/ribbon/"
         */
        "baseApiUrl": string;
        /**
          * false = show a gradient of colors to indicate the value of a cell true = show only two colors (minColor; maxColor) to indicate the values of a cell
          * @default false
         */
        "binaryColor": boolean;
        /**
          * 0 = Normal 1 = Bold
          * @default FONT_STYLE.NORMAL
         */
        "categoryAllStyle": number;
        /**
          * Override of the category case 0 (default) = unchanged 1 = to lower case 2 = to upper case
          * @default FONT_CASE.LOWER_CASE
         */
        "categoryCase": number;
        /**
          * 0 = Normal 1 = Bold
          * @default FONT_STYLE.NORMAL
         */
        "categoryOtherStyle": number;
        /**
          * @default "term,terms"
         */
        "classLabels": string;
        /**
          * Which value to base the cell color on 0 = class count 1 = annotation count
          * @default COLOR_BY.ANNOTATION_COUNT
         */
        "colorBy": number;
        /**
          * if provided, will override any value provided in subjects and subset
         */
        "data": string;
        /**
          * @default true
         */
        "excludePB": boolean;
        /**
          * Filter rows based on the presence of one or more values in a given column The filtering will be based on cell label or id Example: filter-by="evidence:ISS,ISO or multi-step filters: filter-by:evidence:ISS,ISO;term:xxx" Note: if value is "", remove any filtering
         */
        "filterBy": string;
        /**
          * @default true
         */
        "filterCrossAspect": boolean;
        /**
          * @default "PMID:,DOI:,GO_REF:,Reactome:"
         */
        "filterReference": string;
        /**
          * If true, the ribbon will fire an event if a user click an empty cell If false, the ribbon will not fire the event on an empty cell Note: if selectionMode == SELECTION.COLUMN, then the event will trigger if at least one of the selected cells has annotations
          * @default false
         */
        "fireEventOnEmptyCells": boolean;
        /**
          * @default "http://amigo.geneontology.org/amigo/term/"
         */
        "groupBaseUrl": string;
        /**
          * Using this parameter, the table rows can bee grouped based on column ids A multiple step grouping is possible by using a ";" between groups The grouping applies before the ordering Example: hid-1,hid-3 OR hid-1,hid-3;hid-2 Note: if value is "", remove any grouping
          * @default "term,qualifier"
         */
        "groupBy": string;
        /**
          * @default true
         */
        "groupClickable": boolean;
        /**
          * @default 60
         */
        "groupMaxLabelSize": number;
        /**
          * @default true
         */
        "groupNewTab": boolean;
        /**
          * Used to hide specific column of the table
          * @default "qualifier"
         */
        "hideColumns": string;
        /**
          * @default "24,73,180"
         */
        "maxColor": string;
        /**
          * @default 48
         */
        "maxHeatLevel": number;
        /**
          * @default "255,255,255"
         */
        "minColor": string;
        /**
          * This is used to sort the table depending of a column The column cells must be single values The ordering applies after the grouping Note: if value is "", remove any ordering
          * @default "term"
         */
        "orderBy": string;
        /**
          * If no value is provided, the ribbon will load without any group selected. If a value is provided, the ribbon will show the requested group as selected The value should be the id of the group to be selected
         */
        "selected": any;
        /**
          * Click handling of a cell. 0 = select only the cell (1 subject, 1 group) 1 = select the whole column (all subjects, 1 group)
          * @default SELECTION.CELL
         */
        "selectionMode": number;
        /**
          * add a cell at the end of each row/subject to represent all annotations not mapped to a specific term
          * @default true
         */
        "showOtherGroup": boolean;
        /**
          * @default "http://amigo.geneontology.org/amigo/gene_product/"
         */
        "subjectBaseUrl": string;
        /**
          * @default true
         */
        "subjectOpenNewTab": boolean;
        /**
          * Position the subject label of each row 0 = None 1 = Left 2 = Right 3 = Bottom
          * @default POSITION.LEFT
         */
        "subjectPosition": number;
        "subjectUseTaxonIcon": boolean;
        /**
          * provide gene ids (e.g. RGD:620474,RGD:3889 or as a list ["RGD:620474", "RGD:3889"])
          * @default undefined
         */
        "subjects": string;
        /**
          * @default "goslim_agr"
         */
        "subset": string;
    }
    /**
     * An individual cell in the annotation ribbon.
     */
    interface GoAnnotationRibbonCell {
        /**
          * @default "annotation,annotations"
         */
        "annotationLabels": string;
        /**
          * If set to true, won't show any color and can not be hovered or selected This is used for group that can not have annotation for a given subject
          * @default true
         */
        "available": boolean;
        /**
          * @default false
         */
        "binaryColor": boolean;
        /**
          * @default "term,terms"
         */
        "classLabels": string;
        /**
          * @default COLOR_BY.CLASS_COUNT
         */
        "colorBy": number;
        "group": IRibbonGroup;
        /**
          * @default false
         */
        "hovered": boolean;
        /**
          * @default "24,73,180"
         */
        "maxColor": string;
        /**
          * @default 48
         */
        "maxHeatLevel": number;
        /**
          * @default "255,255,255"
         */
        "minColor": string;
        /**
          * @default false
         */
        "selected": boolean;
        "subject": IRibbonSubject;
    }
    /**
     * The Annotation Ribbon Strips component displays a grid of cells. Each row in the grid represents
     * a subject (typically a gene), and each column represents a GO term. The color of each cell
     * indicates the relative number of GO annotations for that subject to the term or one of its
     * descendants in the ontology hierarchy. The columns are additionally grouped into categories
     * which are visually separated in the display.
     * Events are fired when cells or cell headers (groups) are clicked or hovered over.
     */
    interface GoAnnotationRibbonStrips {
        /**
          * add a cell at the beginning of each row/subject to show all annotations
          * @default true
         */
        "addCellAll": boolean;
        /**
          * @default "annotation,annotations"
         */
        "annotationLabels": string;
        /**
          * @default "https://api.geneontology.org/api/ontology/ribbon/"
         */
        "baseApiUrl": string;
        /**
          * false = show a gradient of colors to indicate the value of a cell true = show only two colors (minColor; maxColor) to indicate the values of a cell
          * @default false
         */
        "binaryColor": boolean;
        /**
          * 0 = Normal 1 = Bold
          * @default FONT_STYLE.NORMAL
         */
        "categoryAllStyle": number;
        /**
          * Override of the category case 0 (default) = unchanged 1 = to lower case 2 = to upper case
          * @default FONT_CASE.LOWER_CASE
         */
        "categoryCase": number;
        /**
          * 0 = Normal 1 = Bold
          * @default FONT_STYLE.NORMAL
         */
        "categoryOtherStyle": number;
        /**
          * @default "term,terms"
         */
        "classLabels": string;
        /**
          * Which value to base the cell color on 0 = class count 1 = annotation count
          * @default COLOR_BY.ANNOTATION_COUNT
         */
        "colorBy": number;
        /**
          * if provided, will override any value provided in subjects and subset
         */
        "data": string;
        /**
          * If true, the ribbon will fire an event if a user click an empty cell If false, the ribbon will not fire the event on an empty cell Note: if selectionMode == SELECTION.COLUMN, then the event will trigger if at least one of the selected cells has annotations
          * @default false
         */
        "fireEventOnEmptyCells": boolean;
        /**
          * @default "http://amigo.geneontology.org/amigo/term/"
         */
        "groupBaseUrl": string;
        /**
          * @default true
         */
        "groupClickable": boolean;
        /**
          * @default 60
         */
        "groupMaxLabelSize": number;
        /**
          * @default true
         */
        "groupNewTab": boolean;
        /**
          * @default "24,73,180"
         */
        "maxColor": string;
        /**
          * @default 48
         */
        "maxHeatLevel": number;
        /**
          * @default "255,255,255"
         */
        "minColor": string;
        "ribbonSummary": IRibbonModel;
        "selectGroup": (group_id: any) => Promise<void>;
        /**
          * If no value is provided, the ribbon will load without any group selected. If a value is provided, the ribbon will show the requested group as selected The value should be the id of the group to be selected
         */
        "selected": any;
        /**
          * Click handling of a cell. 0 = select only the cell (1 subject, 1 group) 1 = select the whole column (all subjects, 1 group)
          * @default SELECTION.CELL
         */
        "selectionMode": number;
        /**
          * @default false
         */
        "showOtherGroup": boolean;
        /**
          * @default "http://amigo.geneontology.org/amigo/gene_product/"
         */
        "subjectBaseUrl": string;
        /**
          * @default true
         */
        "subjectOpenNewTab": boolean;
        /**
          * Position the subject label of each row 0 = None 1 = Left 2 = Right 3 = Bottom
          * @default POSITION.LEFT
         */
        "subjectPosition": number;
        "subjectUseTaxonIcon": boolean;
        /**
          * provide gene ids (e.g. RGD:620474,RGD:3889 or as a list ["RGD:620474", "RGD:3889"])
          * @default undefined
         */
        "subjects": string;
        /**
          * @default "goslim_agr"
         */
        "subset": string;
        /**
          * When this is set to false, changing the subjects Prop won't trigger the reload of the ribbon This is necessary when the ribbon is showing data other than GO or not using the internal fetchData mechanism
          * @default true
         */
        "updateOnSubjectChange": boolean;
    }
    /**
     * An individual subject in the annotation ribbon.
     */
    interface GoAnnotationRibbonSubject {
        "newTab": boolean;
        "subject": IRibbonSubject;
        "subjectBaseURL": string;
    }
    /**
     * The Annotation Ribbon Table component displays a table of GO annotations. This component does not
     * fetch data by itself, it expects the data to be provided in the `data` attribute.
     */
    interface GoAnnotationRibbonTable {
        /**
          * @default "https://api.geneontology.org/api/ontology/ribbon/"
         */
        "baseApiUrl": string;
        /**
          * Reading biolink data. This will trigger a render of the table as would changing data
         */
        "bioLinkData": string;
        /**
          * Must follow the appropriate JSON data model Can be given as either JSON or stringified JSON
         */
        "data": string;
        /**
          * Filter rows based on the presence of one or more values in a given column The filtering will be based on cell label or id Example: filter-by="evidence:ISS,ISO or multi-step filters: filter-by:evidence:ISS,ISO;term:xxx" Note: if value is "", remove any filtering
         */
        "filterBy": string;
        /**
          * @default "http://amigo.geneontology.org/amigo/term/"
         */
        "groupBaseUrl": string;
        /**
          * Using this parameter, the table rows can bee grouped based on column ids A multiple step grouping is possible by using a ";" between groups The grouping applies before the ordering Example: hid-1,hid-3 OR hid-1,hid-3;hid-2 Note: if value is "", remove any grouping
         */
        "groupBy": string;
        /**
          * Used to hide specific column of the table
         */
        "hideColumns": string;
        /**
          * This is used to sort the table depending of a column The column cells must be single values The ordering applies after the grouping Note: if value is "", remove any ordering
         */
        "orderBy": string;
        "showCurie": () => Promise<void>;
        "showDBXrefs": () => Promise<void>;
        "showOriginalTable": () => Promise<void>;
        "showTable": () => Promise<void>;
        /**
          * @default "http://amigo.geneontology.org/amigo/gene_product/"
         */
        "subjectBaseUrl": string;
    }
    /**
     * The Entity Autocomplete component provides an input field that allows users to search for
     * entities (genes or GO terms) using the GO API.
     */
    interface GoEntityAutocomplete {
        /**
          * Category to constrain the search; by default search "gene" Other values accepted: `undefined` : search both terms and genes `gene` : will only search genes used in GO `biological%20process` : will search for GO BP terms `molecular%20function` : will search for GO MF terms `cellular%20component` : will search for GO CC terms `cellular%20component,molecular%20function,biological%20process` : will search any GO term
          * @default "gene"
         */
        "category": string;
        /**
          * Maximum number of results to show
          * @default 100
         */
        "maxResults": number;
        /**
          * Default placeholder for the autocomplete
          * @default ""
         */
        "placeholder": string;
        "value": string;
    }
    /**
     * The GO-CAM Viewer component renders a [GO-CAM](https://geneontology.org/docs/gocam-overview/) as
     * a graph of activities and their relationships. The sidebar displays a list of the activities,
     * grouped by the larger GO `biological_process` in which the activity is a part, and showing
     * additional details such as the gene product that carries out the activity and the GO
     * `cellular_component` in which the activity occurs.
     * For advanced use cases, the [legend](./gocam-viewer-legend) can be displayed separately.
     */
    interface GoGocamViewer {
        /**
          * The url used to fetch GO-CAM graphs. Any occurrence of %ID in the string will be replaced by the GO-CAM ID.
          * @default "https://api.geneontology.org/api/go-cam/%ID"
         */
        "apiUrl": string;
        /**
          * ID of the GO-CAM to be shown in this widget. If provided, the GO-CAM will automatically be fetched using this ID and the value of the `api-url` prop. If omitted, data will not automatically be fetched, but can be provided via the `setModelData` method. This may be useful if the host page already has the GO-CAM data.
         */
        "gocamId": string;
        /**
          * Center the cytoscape graph to fit the whole graph
         */
        "resetView": () => Promise<void>;
        /**
          * Define if the GO-CAM viz should capture the mouse scroll
          * @param shouldAF set to true if you want a mouse scroll to be captured by the component
         */
        "setAutoFocus": (shouldAF: any) => Promise<void>;
        /**
          * Manually supply GO-CAM data to be rendered. This will overwrite any data previously fetched using the gocamId and apiUrl props, if they were provided.
          * @param model GO-CAM object
         */
        "setModelData": (model: any) => Promise<void>;
        /**
          * Show/hide default legend
          * @default true
         */
        "showLegend": boolean;
        "toggleComplex": () => Promise<void>;
    }
    /**
     * The GO-CAM Viewer Legend component displays a legend for the relations used in the GO-CAM graph
     * display. This can be used in advanced cases where the `go-gocam-viewer` component is used with
     * the `show-legend` property set to `false`, and the legend needs to be displayed separately.
     */
    interface GoGocamViewerLegend {
    }
    /**
     * The GO-CAM Viewer Sidebar
     */
    interface GoGocamViewerSidebar {
        /**
          * BBOP Graph Handler -> GO-CAM Must be provided to build the side panel
         */
        "cam": Cam;
        "highlightActivity": (nodeId: any) => Promise<void>;
        /**
          * Passed by the parent to highlight & clear highlight nodes
         */
        "parentCy": any;
    }
    /**
     * The Spinner component displays a loading spinner with an optional message.
     */
    interface GoSpinner {
        "message": string;
    }
}
export interface GoAnnotationRibbonStripsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGoAnnotationRibbonStripsElement;
}
export interface GoAnnotationRibbonSubjectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGoAnnotationRibbonSubjectElement;
}
export interface GoEntityAutocompleteCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGoEntityAutocompleteElement;
}
export interface GoGocamViewerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGoGocamViewerElement;
}
export interface GoGocamViewerSidebarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGoGocamViewerSidebarElement;
}
declare global {
    /**
     * The Annotation Ribbon component summarizes [GO annotation](https://geneontology.org/docs/go-annotations/)
     * as a grid of cells. Each row in the grid (called "strips") represents a subject (typically a
     * gene), and each column represents a GO term. The color of each cell indicates the relative number
     * of GO annotations for that subject to the term or one of its descendants in the ontology
     * hierarchy. The columns are additionally grouped into categories which are visually separated in
     * the display.
     * When a cell is clicked, a table of annotations is displayed below the strips. The table shows the
     * details of the annotations for the selected subject and term.
     * For advanced use cases, the individual components of the ribbon can be used separately:
     * [strips](./annotation-ribbon-strips), [table](./annotation-ribbon-table).
     */
    interface HTMLGoAnnotationRibbonElement extends Components.GoAnnotationRibbon, HTMLStencilElement {
    }
    var HTMLGoAnnotationRibbonElement: {
        prototype: HTMLGoAnnotationRibbonElement;
        new (): HTMLGoAnnotationRibbonElement;
    };
    /**
     * An individual cell in the annotation ribbon.
     */
    interface HTMLGoAnnotationRibbonCellElement extends Components.GoAnnotationRibbonCell, HTMLStencilElement {
    }
    var HTMLGoAnnotationRibbonCellElement: {
        prototype: HTMLGoAnnotationRibbonCellElement;
        new (): HTMLGoAnnotationRibbonCellElement;
    };
    interface HTMLGoAnnotationRibbonStripsElementEventMap {
        "cellClick": any;
        "cellEnter": any;
        "cellLeave": any;
        "groupClick": any;
        "groupEnter": any;
        "groupLeave": any;
    }
    /**
     * The Annotation Ribbon Strips component displays a grid of cells. Each row in the grid represents
     * a subject (typically a gene), and each column represents a GO term. The color of each cell
     * indicates the relative number of GO annotations for that subject to the term or one of its
     * descendants in the ontology hierarchy. The columns are additionally grouped into categories
     * which are visually separated in the display.
     * Events are fired when cells or cell headers (groups) are clicked or hovered over.
     */
    interface HTMLGoAnnotationRibbonStripsElement extends Components.GoAnnotationRibbonStrips, HTMLStencilElement {
        addEventListener<K extends keyof HTMLGoAnnotationRibbonStripsElementEventMap>(type: K, listener: (this: HTMLGoAnnotationRibbonStripsElement, ev: GoAnnotationRibbonStripsCustomEvent<HTMLGoAnnotationRibbonStripsElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLGoAnnotationRibbonStripsElementEventMap>(type: K, listener: (this: HTMLGoAnnotationRibbonStripsElement, ev: GoAnnotationRibbonStripsCustomEvent<HTMLGoAnnotationRibbonStripsElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLGoAnnotationRibbonStripsElement: {
        prototype: HTMLGoAnnotationRibbonStripsElement;
        new (): HTMLGoAnnotationRibbonStripsElement;
    };
    interface HTMLGoAnnotationRibbonSubjectElementEventMap {
        "subjectClick": any;
    }
    /**
     * An individual subject in the annotation ribbon.
     */
    interface HTMLGoAnnotationRibbonSubjectElement extends Components.GoAnnotationRibbonSubject, HTMLStencilElement {
        addEventListener<K extends keyof HTMLGoAnnotationRibbonSubjectElementEventMap>(type: K, listener: (this: HTMLGoAnnotationRibbonSubjectElement, ev: GoAnnotationRibbonSubjectCustomEvent<HTMLGoAnnotationRibbonSubjectElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLGoAnnotationRibbonSubjectElementEventMap>(type: K, listener: (this: HTMLGoAnnotationRibbonSubjectElement, ev: GoAnnotationRibbonSubjectCustomEvent<HTMLGoAnnotationRibbonSubjectElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLGoAnnotationRibbonSubjectElement: {
        prototype: HTMLGoAnnotationRibbonSubjectElement;
        new (): HTMLGoAnnotationRibbonSubjectElement;
    };
    /**
     * The Annotation Ribbon Table component displays a table of GO annotations. This component does not
     * fetch data by itself, it expects the data to be provided in the `data` attribute.
     */
    interface HTMLGoAnnotationRibbonTableElement extends Components.GoAnnotationRibbonTable, HTMLStencilElement {
    }
    var HTMLGoAnnotationRibbonTableElement: {
        prototype: HTMLGoAnnotationRibbonTableElement;
        new (): HTMLGoAnnotationRibbonTableElement;
    };
    interface HTMLGoEntityAutocompleteElementEventMap {
        "itemSelected": any;
    }
    /**
     * The Entity Autocomplete component provides an input field that allows users to search for
     * entities (genes or GO terms) using the GO API.
     */
    interface HTMLGoEntityAutocompleteElement extends Components.GoEntityAutocomplete, HTMLStencilElement {
        addEventListener<K extends keyof HTMLGoEntityAutocompleteElementEventMap>(type: K, listener: (this: HTMLGoEntityAutocompleteElement, ev: GoEntityAutocompleteCustomEvent<HTMLGoEntityAutocompleteElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLGoEntityAutocompleteElementEventMap>(type: K, listener: (this: HTMLGoEntityAutocompleteElement, ev: GoEntityAutocompleteCustomEvent<HTMLGoEntityAutocompleteElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLGoEntityAutocompleteElement: {
        prototype: HTMLGoEntityAutocompleteElement;
        new (): HTMLGoEntityAutocompleteElement;
    };
    interface HTMLGoGocamViewerElementEventMap {
        "nodeOver": any;
        "nodeOut": any;
        "nodeClick": any;
        "layoutChange": any;
    }
    /**
     * The GO-CAM Viewer component renders a [GO-CAM](https://geneontology.org/docs/gocam-overview/) as
     * a graph of activities and their relationships. The sidebar displays a list of the activities,
     * grouped by the larger GO `biological_process` in which the activity is a part, and showing
     * additional details such as the gene product that carries out the activity and the GO
     * `cellular_component` in which the activity occurs.
     * For advanced use cases, the [legend](./gocam-viewer-legend) can be displayed separately.
     */
    interface HTMLGoGocamViewerElement extends Components.GoGocamViewer, HTMLStencilElement {
        addEventListener<K extends keyof HTMLGoGocamViewerElementEventMap>(type: K, listener: (this: HTMLGoGocamViewerElement, ev: GoGocamViewerCustomEvent<HTMLGoGocamViewerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLGoGocamViewerElementEventMap>(type: K, listener: (this: HTMLGoGocamViewerElement, ev: GoGocamViewerCustomEvent<HTMLGoGocamViewerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLGoGocamViewerElement: {
        prototype: HTMLGoGocamViewerElement;
        new (): HTMLGoGocamViewerElement;
    };
    /**
     * The GO-CAM Viewer Legend component displays a legend for the relations used in the GO-CAM graph
     * display. This can be used in advanced cases where the `go-gocam-viewer` component is used with
     * the `show-legend` property set to `false`, and the legend needs to be displayed separately.
     */
    interface HTMLGoGocamViewerLegendElement extends Components.GoGocamViewerLegend, HTMLStencilElement {
    }
    var HTMLGoGocamViewerLegendElement: {
        prototype: HTMLGoGocamViewerLegendElement;
        new (): HTMLGoGocamViewerLegendElement;
    };
    interface HTMLGoGocamViewerSidebarElementEventMap {
        "selectChanged": any;
    }
    /**
     * The GO-CAM Viewer Sidebar
     */
    interface HTMLGoGocamViewerSidebarElement extends Components.GoGocamViewerSidebar, HTMLStencilElement {
        addEventListener<K extends keyof HTMLGoGocamViewerSidebarElementEventMap>(type: K, listener: (this: HTMLGoGocamViewerSidebarElement, ev: GoGocamViewerSidebarCustomEvent<HTMLGoGocamViewerSidebarElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLGoGocamViewerSidebarElementEventMap>(type: K, listener: (this: HTMLGoGocamViewerSidebarElement, ev: GoGocamViewerSidebarCustomEvent<HTMLGoGocamViewerSidebarElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLGoGocamViewerSidebarElement: {
        prototype: HTMLGoGocamViewerSidebarElement;
        new (): HTMLGoGocamViewerSidebarElement;
    };
    /**
     * The Spinner component displays a loading spinner with an optional message.
     */
    interface HTMLGoSpinnerElement extends Components.GoSpinner, HTMLStencilElement {
    }
    var HTMLGoSpinnerElement: {
        prototype: HTMLGoSpinnerElement;
        new (): HTMLGoSpinnerElement;
    };
    interface HTMLElementTagNameMap {
        "go-annotation-ribbon": HTMLGoAnnotationRibbonElement;
        "go-annotation-ribbon-cell": HTMLGoAnnotationRibbonCellElement;
        "go-annotation-ribbon-strips": HTMLGoAnnotationRibbonStripsElement;
        "go-annotation-ribbon-subject": HTMLGoAnnotationRibbonSubjectElement;
        "go-annotation-ribbon-table": HTMLGoAnnotationRibbonTableElement;
        "go-entity-autocomplete": HTMLGoEntityAutocompleteElement;
        "go-gocam-viewer": HTMLGoGocamViewerElement;
        "go-gocam-viewer-legend": HTMLGoGocamViewerLegendElement;
        "go-gocam-viewer-sidebar": HTMLGoGocamViewerSidebarElement;
        "go-spinner": HTMLGoSpinnerElement;
    }
}
declare namespace LocalJSX {
    /**
     * The Annotation Ribbon component summarizes [GO annotation](https://geneontology.org/docs/go-annotations/)
     * as a grid of cells. Each row in the grid (called "strips") represents a subject (typically a
     * gene), and each column represents a GO term. The color of each cell indicates the relative number
     * of GO annotations for that subject to the term or one of its descendants in the ontology
     * hierarchy. The columns are additionally grouped into categories which are visually separated in
     * the display.
     * When a cell is clicked, a table of annotations is displayed below the strips. The table shows the
     * details of the annotations for the selected subject and term.
     * For advanced use cases, the individual components of the ribbon can be used separately:
     * [strips](./annotation-ribbon-strips), [table](./annotation-ribbon-table).
     */
    interface GoAnnotationRibbon {
        /**
          * add a cell at the beginning of each row/subject to show all annotations
          * @default true
         */
        "addCellAll"?: boolean;
        /**
          * @default "annotation,annotations"
         */
        "annotationLabels"?: string;
        /**
          * @default "https://api.geneontology.org/api/ontology/ribbon/"
         */
        "baseApiUrl"?: string;
        /**
          * false = show a gradient of colors to indicate the value of a cell true = show only two colors (minColor; maxColor) to indicate the values of a cell
          * @default false
         */
        "binaryColor"?: boolean;
        /**
          * 0 = Normal 1 = Bold
          * @default FONT_STYLE.NORMAL
         */
        "categoryAllStyle"?: number;
        /**
          * Override of the category case 0 (default) = unchanged 1 = to lower case 2 = to upper case
          * @default FONT_CASE.LOWER_CASE
         */
        "categoryCase"?: number;
        /**
          * 0 = Normal 1 = Bold
          * @default FONT_STYLE.NORMAL
         */
        "categoryOtherStyle"?: number;
        /**
          * @default "term,terms"
         */
        "classLabels"?: string;
        /**
          * Which value to base the cell color on 0 = class count 1 = annotation count
          * @default COLOR_BY.ANNOTATION_COUNT
         */
        "colorBy"?: number;
        /**
          * if provided, will override any value provided in subjects and subset
         */
        "data"?: string;
        /**
          * @default true
         */
        "excludePB"?: boolean;
        /**
          * Filter rows based on the presence of one or more values in a given column The filtering will be based on cell label or id Example: filter-by="evidence:ISS,ISO or multi-step filters: filter-by:evidence:ISS,ISO;term:xxx" Note: if value is "", remove any filtering
         */
        "filterBy"?: string;
        /**
          * @default true
         */
        "filterCrossAspect"?: boolean;
        /**
          * @default "PMID:,DOI:,GO_REF:,Reactome:"
         */
        "filterReference"?: string;
        /**
          * If true, the ribbon will fire an event if a user click an empty cell If false, the ribbon will not fire the event on an empty cell Note: if selectionMode == SELECTION.COLUMN, then the event will trigger if at least one of the selected cells has annotations
          * @default false
         */
        "fireEventOnEmptyCells"?: boolean;
        /**
          * @default "http://amigo.geneontology.org/amigo/term/"
         */
        "groupBaseUrl"?: string;
        /**
          * Using this parameter, the table rows can bee grouped based on column ids A multiple step grouping is possible by using a ";" between groups The grouping applies before the ordering Example: hid-1,hid-3 OR hid-1,hid-3;hid-2 Note: if value is "", remove any grouping
          * @default "term,qualifier"
         */
        "groupBy"?: string;
        /**
          * @default true
         */
        "groupClickable"?: boolean;
        /**
          * @default 60
         */
        "groupMaxLabelSize"?: number;
        /**
          * @default true
         */
        "groupNewTab"?: boolean;
        /**
          * Used to hide specific column of the table
          * @default "qualifier"
         */
        "hideColumns"?: string;
        /**
          * @default "24,73,180"
         */
        "maxColor"?: string;
        /**
          * @default 48
         */
        "maxHeatLevel"?: number;
        /**
          * @default "255,255,255"
         */
        "minColor"?: string;
        /**
          * This is used to sort the table depending of a column The column cells must be single values The ordering applies after the grouping Note: if value is "", remove any ordering
          * @default "term"
         */
        "orderBy"?: string;
        /**
          * If no value is provided, the ribbon will load without any group selected. If a value is provided, the ribbon will show the requested group as selected The value should be the id of the group to be selected
         */
        "selected"?: any;
        /**
          * Click handling of a cell. 0 = select only the cell (1 subject, 1 group) 1 = select the whole column (all subjects, 1 group)
          * @default SELECTION.CELL
         */
        "selectionMode"?: number;
        /**
          * add a cell at the end of each row/subject to represent all annotations not mapped to a specific term
          * @default true
         */
        "showOtherGroup"?: boolean;
        /**
          * @default "http://amigo.geneontology.org/amigo/gene_product/"
         */
        "subjectBaseUrl"?: string;
        /**
          * @default true
         */
        "subjectOpenNewTab"?: boolean;
        /**
          * Position the subject label of each row 0 = None 1 = Left 2 = Right 3 = Bottom
          * @default POSITION.LEFT
         */
        "subjectPosition"?: number;
        "subjectUseTaxonIcon"?: boolean;
        /**
          * provide gene ids (e.g. RGD:620474,RGD:3889 or as a list ["RGD:620474", "RGD:3889"])
          * @default undefined
         */
        "subjects"?: string;
        /**
          * @default "goslim_agr"
         */
        "subset"?: string;
    }
    /**
     * An individual cell in the annotation ribbon.
     */
    interface GoAnnotationRibbonCell {
        /**
          * @default "annotation,annotations"
         */
        "annotationLabels"?: string;
        /**
          * If set to true, won't show any color and can not be hovered or selected This is used for group that can not have annotation for a given subject
          * @default true
         */
        "available"?: boolean;
        /**
          * @default false
         */
        "binaryColor"?: boolean;
        /**
          * @default "term,terms"
         */
        "classLabels"?: string;
        /**
          * @default COLOR_BY.CLASS_COUNT
         */
        "colorBy"?: number;
        "group"?: IRibbonGroup;
        /**
          * @default false
         */
        "hovered"?: boolean;
        /**
          * @default "24,73,180"
         */
        "maxColor"?: string;
        /**
          * @default 48
         */
        "maxHeatLevel"?: number;
        /**
          * @default "255,255,255"
         */
        "minColor"?: string;
        /**
          * @default false
         */
        "selected"?: boolean;
        "subject"?: IRibbonSubject;
    }
    /**
     * The Annotation Ribbon Strips component displays a grid of cells. Each row in the grid represents
     * a subject (typically a gene), and each column represents a GO term. The color of each cell
     * indicates the relative number of GO annotations for that subject to the term or one of its
     * descendants in the ontology hierarchy. The columns are additionally grouped into categories
     * which are visually separated in the display.
     * Events are fired when cells or cell headers (groups) are clicked or hovered over.
     */
    interface GoAnnotationRibbonStrips {
        /**
          * add a cell at the beginning of each row/subject to show all annotations
          * @default true
         */
        "addCellAll"?: boolean;
        /**
          * @default "annotation,annotations"
         */
        "annotationLabels"?: string;
        /**
          * @default "https://api.geneontology.org/api/ontology/ribbon/"
         */
        "baseApiUrl"?: string;
        /**
          * false = show a gradient of colors to indicate the value of a cell true = show only two colors (minColor; maxColor) to indicate the values of a cell
          * @default false
         */
        "binaryColor"?: boolean;
        /**
          * 0 = Normal 1 = Bold
          * @default FONT_STYLE.NORMAL
         */
        "categoryAllStyle"?: number;
        /**
          * Override of the category case 0 (default) = unchanged 1 = to lower case 2 = to upper case
          * @default FONT_CASE.LOWER_CASE
         */
        "categoryCase"?: number;
        /**
          * 0 = Normal 1 = Bold
          * @default FONT_STYLE.NORMAL
         */
        "categoryOtherStyle"?: number;
        /**
          * @default "term,terms"
         */
        "classLabels"?: string;
        /**
          * Which value to base the cell color on 0 = class count 1 = annotation count
          * @default COLOR_BY.ANNOTATION_COUNT
         */
        "colorBy"?: number;
        /**
          * if provided, will override any value provided in subjects and subset
         */
        "data"?: string;
        /**
          * If true, the ribbon will fire an event if a user click an empty cell If false, the ribbon will not fire the event on an empty cell Note: if selectionMode == SELECTION.COLUMN, then the event will trigger if at least one of the selected cells has annotations
          * @default false
         */
        "fireEventOnEmptyCells"?: boolean;
        /**
          * @default "http://amigo.geneontology.org/amigo/term/"
         */
        "groupBaseUrl"?: string;
        /**
          * @default true
         */
        "groupClickable"?: boolean;
        /**
          * @default 60
         */
        "groupMaxLabelSize"?: number;
        /**
          * @default true
         */
        "groupNewTab"?: boolean;
        /**
          * @default "24,73,180"
         */
        "maxColor"?: string;
        /**
          * @default 48
         */
        "maxHeatLevel"?: number;
        /**
          * @default "255,255,255"
         */
        "minColor"?: string;
        /**
          * This event is triggered whenever a ribbon cell is clicked
         */
        "onCellClick"?: (event: GoAnnotationRibbonStripsCustomEvent<any>) => void;
        /**
          * This event is triggered whenever the mouse enters a cell area
         */
        "onCellEnter"?: (event: GoAnnotationRibbonStripsCustomEvent<any>) => void;
        /**
          * This event is triggered whenever the mouse leaves a cell area
         */
        "onCellLeave"?: (event: GoAnnotationRibbonStripsCustomEvent<any>) => void;
        /**
          * This event is triggered whenever a group cell is clicked
         */
        "onGroupClick"?: (event: GoAnnotationRibbonStripsCustomEvent<any>) => void;
        /**
          * This event is triggered whenever the mouse enters a group cell area
         */
        "onGroupEnter"?: (event: GoAnnotationRibbonStripsCustomEvent<any>) => void;
        /**
          * This event is triggered whenever the mouse leaves a group cell area
         */
        "onGroupLeave"?: (event: GoAnnotationRibbonStripsCustomEvent<any>) => void;
        "ribbonSummary"?: IRibbonModel;
        /**
          * If no value is provided, the ribbon will load without any group selected. If a value is provided, the ribbon will show the requested group as selected The value should be the id of the group to be selected
         */
        "selected"?: any;
        /**
          * Click handling of a cell. 0 = select only the cell (1 subject, 1 group) 1 = select the whole column (all subjects, 1 group)
          * @default SELECTION.CELL
         */
        "selectionMode"?: number;
        /**
          * @default false
         */
        "showOtherGroup"?: boolean;
        /**
          * @default "http://amigo.geneontology.org/amigo/gene_product/"
         */
        "subjectBaseUrl"?: string;
        /**
          * @default true
         */
        "subjectOpenNewTab"?: boolean;
        /**
          * Position the subject label of each row 0 = None 1 = Left 2 = Right 3 = Bottom
          * @default POSITION.LEFT
         */
        "subjectPosition"?: number;
        "subjectUseTaxonIcon"?: boolean;
        /**
          * provide gene ids (e.g. RGD:620474,RGD:3889 or as a list ["RGD:620474", "RGD:3889"])
          * @default undefined
         */
        "subjects"?: string;
        /**
          * @default "goslim_agr"
         */
        "subset"?: string;
        /**
          * When this is set to false, changing the subjects Prop won't trigger the reload of the ribbon This is necessary when the ribbon is showing data other than GO or not using the internal fetchData mechanism
          * @default true
         */
        "updateOnSubjectChange"?: boolean;
    }
    /**
     * An individual subject in the annotation ribbon.
     */
    interface GoAnnotationRibbonSubject {
        "newTab"?: boolean;
        /**
          * This event is triggered whenever a subject label is clicked Can call preventDefault() to avoid the default behavior (opening the linked subject page)
         */
        "onSubjectClick"?: (event: GoAnnotationRibbonSubjectCustomEvent<any>) => void;
        "subject"?: IRibbonSubject;
        "subjectBaseURL"?: string;
    }
    /**
     * The Annotation Ribbon Table component displays a table of GO annotations. This component does not
     * fetch data by itself, it expects the data to be provided in the `data` attribute.
     */
    interface GoAnnotationRibbonTable {
        /**
          * @default "https://api.geneontology.org/api/ontology/ribbon/"
         */
        "baseApiUrl"?: string;
        /**
          * Reading biolink data. This will trigger a render of the table as would changing data
         */
        "bioLinkData"?: string;
        /**
          * Must follow the appropriate JSON data model Can be given as either JSON or stringified JSON
         */
        "data"?: string;
        /**
          * Filter rows based on the presence of one or more values in a given column The filtering will be based on cell label or id Example: filter-by="evidence:ISS,ISO or multi-step filters: filter-by:evidence:ISS,ISO;term:xxx" Note: if value is "", remove any filtering
         */
        "filterBy"?: string;
        /**
          * @default "http://amigo.geneontology.org/amigo/term/"
         */
        "groupBaseUrl"?: string;
        /**
          * Using this parameter, the table rows can bee grouped based on column ids A multiple step grouping is possible by using a ";" between groups The grouping applies before the ordering Example: hid-1,hid-3 OR hid-1,hid-3;hid-2 Note: if value is "", remove any grouping
         */
        "groupBy"?: string;
        /**
          * Used to hide specific column of the table
         */
        "hideColumns"?: string;
        /**
          * This is used to sort the table depending of a column The column cells must be single values The ordering applies after the grouping Note: if value is "", remove any ordering
         */
        "orderBy"?: string;
        /**
          * @default "http://amigo.geneontology.org/amigo/gene_product/"
         */
        "subjectBaseUrl"?: string;
    }
    /**
     * The Entity Autocomplete component provides an input field that allows users to search for
     * entities (genes or GO terms) using the GO API.
     */
    interface GoEntityAutocomplete {
        /**
          * Category to constrain the search; by default search "gene" Other values accepted: `undefined` : search both terms and genes `gene` : will only search genes used in GO `biological%20process` : will search for GO BP terms `molecular%20function` : will search for GO MF terms `cellular%20component` : will search for GO CC terms `cellular%20component,molecular%20function,biological%20process` : will search any GO term
          * @default "gene"
         */
        "category"?: string;
        /**
          * Maximum number of results to show
          * @default 100
         */
        "maxResults"?: number;
        /**
          * Event triggered whenever an item is selected from the autocomplete
         */
        "onItemSelected"?: (event: GoEntityAutocompleteCustomEvent<any>) => void;
        /**
          * Default placeholder for the autocomplete
          * @default ""
         */
        "placeholder"?: string;
        "value"?: string;
    }
    /**
     * The GO-CAM Viewer component renders a [GO-CAM](https://geneontology.org/docs/gocam-overview/) as
     * a graph of activities and their relationships. The sidebar displays a list of the activities,
     * grouped by the larger GO `biological_process` in which the activity is a part, and showing
     * additional details such as the gene product that carries out the activity and the GO
     * `cellular_component` in which the activity occurs.
     * For advanced use cases, the [legend](./gocam-viewer-legend) can be displayed separately.
     */
    interface GoGocamViewer {
        /**
          * The url used to fetch GO-CAM graphs. Any occurrence of %ID in the string will be replaced by the GO-CAM ID.
          * @default "https://api.geneontology.org/api/go-cam/%ID"
         */
        "apiUrl"?: string;
        /**
          * ID of the GO-CAM to be shown in this widget. If provided, the GO-CAM will automatically be fetched using this ID and the value of the `api-url` prop. If omitted, data will not automatically be fetched, but can be provided via the `setModelData` method. This may be useful if the host page already has the GO-CAM data.
         */
        "gocamId"?: string;
        "onLayoutChange"?: (event: GoGocamViewerCustomEvent<any>) => void;
        "onNodeClick"?: (event: GoGocamViewerCustomEvent<any>) => void;
        "onNodeOut"?: (event: GoGocamViewerCustomEvent<any>) => void;
        "onNodeOver"?: (event: GoGocamViewerCustomEvent<any>) => void;
        /**
          * Show/hide default legend
          * @default true
         */
        "showLegend"?: boolean;
    }
    /**
     * The GO-CAM Viewer Legend component displays a legend for the relations used in the GO-CAM graph
     * display. This can be used in advanced cases where the `go-gocam-viewer` component is used with
     * the `show-legend` property set to `false`, and the legend needs to be displayed separately.
     */
    interface GoGocamViewerLegend {
    }
    /**
     * The GO-CAM Viewer Sidebar
     */
    interface GoGocamViewerSidebar {
        /**
          * BBOP Graph Handler -> GO-CAM Must be provided to build the side panel
         */
        "cam"?: Cam;
        "onSelectChanged"?: (event: GoGocamViewerSidebarCustomEvent<any>) => void;
        /**
          * Passed by the parent to highlight & clear highlight nodes
         */
        "parentCy"?: any;
    }
    /**
     * The Spinner component displays a loading spinner with an optional message.
     */
    interface GoSpinner {
        "message"?: string;
    }
    interface IntrinsicElements {
        "go-annotation-ribbon": GoAnnotationRibbon;
        "go-annotation-ribbon-cell": GoAnnotationRibbonCell;
        "go-annotation-ribbon-strips": GoAnnotationRibbonStrips;
        "go-annotation-ribbon-subject": GoAnnotationRibbonSubject;
        "go-annotation-ribbon-table": GoAnnotationRibbonTable;
        "go-entity-autocomplete": GoEntityAutocomplete;
        "go-gocam-viewer": GoGocamViewer;
        "go-gocam-viewer-legend": GoGocamViewerLegend;
        "go-gocam-viewer-sidebar": GoGocamViewerSidebar;
        "go-spinner": GoSpinner;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            /**
             * The Annotation Ribbon component summarizes [GO annotation](https://geneontology.org/docs/go-annotations/)
             * as a grid of cells. Each row in the grid (called "strips") represents a subject (typically a
             * gene), and each column represents a GO term. The color of each cell indicates the relative number
             * of GO annotations for that subject to the term or one of its descendants in the ontology
             * hierarchy. The columns are additionally grouped into categories which are visually separated in
             * the display.
             * When a cell is clicked, a table of annotations is displayed below the strips. The table shows the
             * details of the annotations for the selected subject and term.
             * For advanced use cases, the individual components of the ribbon can be used separately:
             * [strips](./annotation-ribbon-strips), [table](./annotation-ribbon-table).
             */
            "go-annotation-ribbon": LocalJSX.GoAnnotationRibbon & JSXBase.HTMLAttributes<HTMLGoAnnotationRibbonElement>;
            /**
             * An individual cell in the annotation ribbon.
             */
            "go-annotation-ribbon-cell": LocalJSX.GoAnnotationRibbonCell & JSXBase.HTMLAttributes<HTMLGoAnnotationRibbonCellElement>;
            /**
             * The Annotation Ribbon Strips component displays a grid of cells. Each row in the grid represents
             * a subject (typically a gene), and each column represents a GO term. The color of each cell
             * indicates the relative number of GO annotations for that subject to the term or one of its
             * descendants in the ontology hierarchy. The columns are additionally grouped into categories
             * which are visually separated in the display.
             * Events are fired when cells or cell headers (groups) are clicked or hovered over.
             */
            "go-annotation-ribbon-strips": LocalJSX.GoAnnotationRibbonStrips & JSXBase.HTMLAttributes<HTMLGoAnnotationRibbonStripsElement>;
            /**
             * An individual subject in the annotation ribbon.
             */
            "go-annotation-ribbon-subject": LocalJSX.GoAnnotationRibbonSubject & JSXBase.HTMLAttributes<HTMLGoAnnotationRibbonSubjectElement>;
            /**
             * The Annotation Ribbon Table component displays a table of GO annotations. This component does not
             * fetch data by itself, it expects the data to be provided in the `data` attribute.
             */
            "go-annotation-ribbon-table": LocalJSX.GoAnnotationRibbonTable & JSXBase.HTMLAttributes<HTMLGoAnnotationRibbonTableElement>;
            /**
             * The Entity Autocomplete component provides an input field that allows users to search for
             * entities (genes or GO terms) using the GO API.
             */
            "go-entity-autocomplete": LocalJSX.GoEntityAutocomplete & JSXBase.HTMLAttributes<HTMLGoEntityAutocompleteElement>;
            /**
             * The GO-CAM Viewer component renders a [GO-CAM](https://geneontology.org/docs/gocam-overview/) as
             * a graph of activities and their relationships. The sidebar displays a list of the activities,
             * grouped by the larger GO `biological_process` in which the activity is a part, and showing
             * additional details such as the gene product that carries out the activity and the GO
             * `cellular_component` in which the activity occurs.
             * For advanced use cases, the [legend](./gocam-viewer-legend) can be displayed separately.
             */
            "go-gocam-viewer": LocalJSX.GoGocamViewer & JSXBase.HTMLAttributes<HTMLGoGocamViewerElement>;
            /**
             * The GO-CAM Viewer Legend component displays a legend for the relations used in the GO-CAM graph
             * display. This can be used in advanced cases where the `go-gocam-viewer` component is used with
             * the `show-legend` property set to `false`, and the legend needs to be displayed separately.
             */
            "go-gocam-viewer-legend": LocalJSX.GoGocamViewerLegend & JSXBase.HTMLAttributes<HTMLGoGocamViewerLegendElement>;
            /**
             * The GO-CAM Viewer Sidebar
             */
            "go-gocam-viewer-sidebar": LocalJSX.GoGocamViewerSidebar & JSXBase.HTMLAttributes<HTMLGoGocamViewerSidebarElement>;
            /**
             * The Spinner component displays a loading spinner with an optional message.
             */
            "go-spinner": LocalJSX.GoSpinner & JSXBase.HTMLAttributes<HTMLGoSpinnerElement>;
        }
    }
}
