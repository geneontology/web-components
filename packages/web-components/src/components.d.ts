/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { ColorByOption, IRibbonCellEvent, IRibbonGroup, IRibbonGroupEvent, IRibbonModel, IRibbonSubject, Placement, SelectionModeOption, SubjectPositionOption, TableData } from "./globals/models";
import { Cam } from "./globals/@noctua.form";
export { ColorByOption, IRibbonCellEvent, IRibbonGroup, IRibbonGroupEvent, IRibbonModel, IRibbonSubject, Placement, SelectionModeOption, SubjectPositionOption, TableData } from "./globals/models";
export { Cam } from "./globals/@noctua.form";
export namespace Components {
    /**
     * The Annotation Ribbon component summarizes [GO annotation](https://geneontology.org/docs/go-annotations/)
     * as a grid of cells. Each row in the grid (called "strips") represents a subject (typically a
     * gene), and each column represents a GO term. The color of each cell indicates the relative number
     * of GO annotations for that subject to the term or one of its descendants in the ontology
     * hierarchy. The columns are additionally grouped into categories which are visually separated in
     * the display.
     * When a cell is clicked, a table of annotations is displayed below the strips. The table shows the
     * details of the annotations for the selected subject and term.
     * For advanced use cases, the individual components of the ribbon can be used separately:
     * [strips](./annotation-ribbon-strips), [table](./annotation-ribbon-table).
     */
    interface GoAnnotationRibbon {
        /**
          * Labels used with annotation counts.
          * @default "annotation,annotations"
         */
        "annotationLabels": string;
        /**
          * If `true`, show only two colors (`minColor` and `maxColor`) to indicate the values of a cell. Otherwise, the color of a cell will be interpolated between `minColor` and `maxColor` based on the number of annotations or classes.
          * @default false
         */
        "binaryColor": boolean;
        /**
          * Labels used with class counts.
          * @default "term,terms"
         */
        "classLabels": string;
        /**
          * Whether to color cells by annotations or classes.
          * @default "annotations"
         */
        "colorBy": ColorByOption;
        /**
          * If true, will exclude the protein binding GO term (GO:0005515) from the table
          * @default true
         */
        "excludeProteinBinding": boolean;
        /**
          * Filter rows based on the presence of one or more values in a given column The filtering will be based on cell label or id Example: filter-by="evidence:ISS,ISO or multi-step filters: filter-by:evidence:ISS,ISO;term:xxx" Note: if value is "", remove any filtering
         */
        "filterBy": string;
        /**
          * If true, the table will filter out associations that are cross-aspect
          * @default true
         */
        "filterCrossAspect": boolean;
        /**
          * Comma-separated list of reference prefixes to filter include
          * @default "PMID:,DOI:,GO_REF:,Reactome:"
         */
        "filterReference": string;
        /**
          * Using this parameter, the table rows can bee grouped based on column ids A multiple step grouping is possible by using a ";" between groups The grouping applies before the ordering Example: hid-1,hid-3 OR hid-1,hid-3;hid-2 Note: if value is "", remove any grouping
          * @default "term,qualifier"
         */
        "groupBy": string;
        /**
          * If `true`, the group labels are clickable and will trigger the `groupClick` event
          * @default true
         */
        "groupClickable": boolean;
        /**
          * Maximum size of group labels in characters.
          * @default 60
         */
        "groupMaxLabelSize": number;
        /**
          * Used to hide specific column of the table
          * @default "qualifier"
         */
        "hideColumns": string;
        /**
          * Color of cells with the most number of annotations or classes.
          * @default "24,73,180"
         */
        "maxColor": string;
        /**
          * Maximum number of annotations or classes before `maxColor` is applied.
          * @default 48
         */
        "maxHeatLevel": number;
        /**
          * Color of cells with the least number of annotations or classes.
          * @default "255,255,255"
         */
        "minColor": string;
        /**
          * This is used to sort the table depending of a column The column cells must be single values The ordering applies after the grouping Note: if value is "", remove any ordering
          * @default "term"
         */
        "orderBy": string;
        /**
          * URL for the API endpoint to fetch the ribbon data when subjects are provided.
          * @default "https://api.geneontology.org/api/ontology/ribbon/"
         */
        "ribbonDataApiEndpoint": string;
        /**
          * If no value is provided, the ribbon will load without any group selected. If a value is provided, the ribbon will show the requested group as selected The value should be the id of the group to be selected
         */
        "selected"?: string;
        /**
          * Selection mode for the ribbon cells.
          * @default "cell"
         */
        "selectionMode": SelectionModeOption;
        /**
          * If `true`, show the "all annotations" group.
          * @default true
         */
        "showAllAnnotationsGroup": boolean;
        /**
          * If `true`, show the "Other" group for each category.
          * @default true
         */
        "showOtherGroup": boolean;
        /**
          * Base URL used when rendering subject label links.
          * @default "https://amigo.geneontology.org/amigo/gene_product/"
         */
        "subjectBaseUrl": string;
        /**
          * If `true`, clicking a subject label will open the link in a new tab.
          * @default true
         */
        "subjectOpenNewTab": boolean;
        /**
          * Position subject labels.
          * @default "left"
         */
        "subjectPosition": SubjectPositionOption;
        /**
          * Comma-separated list of gene IDs (e.g. RGD:620474,RGD:3889)
         */
        "subjects"?: string;
        /**
          * Name of the GO subset used for grouping annotations.
          * @default "goslim_agr"
         */
        "subset": string;
        /**
          * URL for the API endpoint to fetch the table data when a group is selected. This is used to fetch the annotations for the selected group and subjects.
          * @default "https://api.geneontology.org/api/bioentityset/slimmer/function"
         */
        "tableDataApiEndpoint": string;
    }
    /**
     * An individual cell in the annotation ribbon.
     */
    interface GoAnnotationRibbonCell {
        /**
          * @default "annotation,annotations"
         */
        "annotationLabels": string;
        /**
          * If set to true, won't show any color and can not be hovered or selected This is used for group that can not have annotation for a given subject
          * @default true
         */
        "available": boolean;
        /**
          * @default false
         */
        "binaryColor": boolean;
        /**
          * @default "term,terms"
         */
        "classLabels": string;
        /**
          * @default "annotations"
         */
        "colorBy": ColorByOption;
        "group": IRibbonGroup;
        /**
          * @default false
         */
        "hovered": boolean;
        /**
          * @default "24,73,180"
         */
        "maxColor": string;
        /**
          * @default 48
         */
        "maxHeatLevel": number;
        /**
          * @default "255,255,255"
         */
        "minColor": string;
        /**
          * @default false
         */
        "selected": boolean;
        "subject": IRibbonSubject;
    }
    /**
     * The Annotation Ribbon Strips component displays a grid of cells. Each row in the grid represents
     * a subject (typically a gene), and each column represents a GO term. The color of each cell
     * indicates the relative number of GO annotations for that subject to the term or one of its
     * descendants in the ontology hierarchy. The columns are additionally grouped into categories
     * which are visually separated in the display.
     * Events are fired when cells or cell headers (groups) are clicked or hovered over.
     */
    interface GoAnnotationRibbonStrips {
        /**
          * Labels used with annotation counts.
          * @default "annotation,annotations"
         */
        "annotationLabels": string;
        /**
          * URL for the API endpoint to fetch the ribbon data when subjects are provided.
          * @default "https://api.geneontology.org/api/ontology/ribbon/"
         */
        "apiEndpoint": string;
        /**
          * If `true`, show only two colors (`minColor` and `maxColor`) to indicate the values of a cell. Otherwise, the color of a cell will be interpolated between `minColor` and `maxColor` based on the number of annotations or classes.
          * @default false
         */
        "binaryColor": boolean;
        /**
          * Labels used with class counts.
          * @default "term,terms"
         */
        "classLabels": string;
        /**
          * Whether to color cells by annotations or classes.
          * @default "annotations"
         */
        "colorBy": ColorByOption;
        /**
          * If `true`, the group labels are clickable and will trigger the `groupClick` event
          * @default true
         */
        "groupClickable": boolean;
        /**
          * Maximum size of group labels in characters.
          * @default 60
         */
        "groupMaxLabelSize": number;
        /**
          * Color of cells with the most number of annotations or classes.
          * @default "24,73,180"
         */
        "maxColor": string;
        /**
          * Maximum number of annotations or classes before `maxColor` is applied.
          * @default 48
         */
        "maxHeatLevel": number;
        /**
          * Color of cells with the least number of annotations or classes.
          * @default "255,255,255"
         */
        "minColor": string;
        /**
          * If no value is provided, the ribbon will load without any group selected. If a value is provided, the ribbon will show the requested group as selected The value should be the id of the group to be selected
         */
        "selected"?: string;
        /**
          * Selection mode for the ribbon cells.
          * @default "cell"
         */
        "selectionMode": SelectionModeOption;
        /**
          * Sets the data for the ribbon manually.  Once this method is called, the provided data will be used and changes to the subjects, subset, or apiEndpoint properties will not trigger a data fetch.
          * @param data
         */
        "setData": (data: IRibbonModel | undefined) => Promise<void>;
        /**
          * If `true`, show the "all annotations" group.
          * @default true
         */
        "showAllAnnotationsGroup": boolean;
        /**
          * If `true`, show the "Other" group for each category.
          * @default false
         */
        "showOtherGroup": boolean;
        /**
          * Base URL used when rendering subject label links.
          * @default "https://amigo.geneontology.org/amigo/gene_product/"
         */
        "subjectBaseUrl": string;
        /**
          * If `true`, clicking a subject label will open the link in a new tab.
          * @default true
         */
        "subjectOpenNewTab": boolean;
        /**
          * Position subject labels.
          * @default "left"
         */
        "subjectPosition": SubjectPositionOption;
        /**
          * Comma-separated list of gene IDs (e.g. RGD:620474,RGD:3889)
         */
        "subjects"?: string;
        /**
          * Name of the GO subset used for grouping annotations.
          * @default "goslim_agr"
         */
        "subset": string;
    }
    /**
     * An individual subject in the annotation ribbon.
     */
    interface GoAnnotationRibbonSubject {
        /**
          * @default true
         */
        "newTab": boolean;
        "subject": IRibbonSubject;
        /**
          * @default "/"
         */
        "subjectBaseURL": string;
    }
    /**
     * The Annotation Ribbon Table component displays a table of GO annotations. This component does not
     * fetch data by itself, it expects the data to be provided in the `data` attribute.
     */
    interface GoAnnotationRibbonTable {
        /**
          * URL for the API endpoint to fetch the table data when subjects and slims are provided.
          * @default "https://api.geneontology.org/api/bioentityset/slimmer/function"
         */
        "apiEndpoint": string;
        /**
          * If true, will exclude the protein binding GO term (GO:0005515) from the table
          * @default true
         */
        "excludeProteinBinding": boolean;
        /**
          * Filter rows based on the presence of one or more values in a given column The filtering will be based on cell label or id Example: filter-by="evidence:ISS,ISO or multi-step filters: filter-by:evidence:ISS,ISO;term:xxx"
         */
        "filterBy"?: string;
        /**
          * Comma-separated list of reference prefixes to filter include
          * @default "PMID:,DOI:,GO_REF:,Reactome:"
         */
        "filterReference": string;
        /**
          * Using this parameter, the table rows can bee grouped based on column ids A multiple step grouping is possible by using a ";" between groups The grouping applies before the ordering Example: hid-1,hid-3 OR hid-1,hid-3;hid-2
         */
        "groupBy"?: string;
        /**
          * Used to hide specific column of the table
         */
        "hideColumns"?: string;
        /**
          * This is used to sort the table depending of a column The column cells must be single values The ordering applies after the grouping
         */
        "orderBy"?: string;
        /**
          * Set the table data manually.  Once this method is called, changes to the subjects or slims properties will not trigger a refetch of the data.
          * @param data The table data to set.
         */
        "setData": (data?: TableData) => Promise<void>;
        /**
          * Comma-separate list of GO term IDs (e.g. GO:0003674,GO:0008150,GO:0005575)
         */
        "slims"?: string;
        /**
          * Comma-separated list of gene IDs (e.g. RGD:620474,RGD:3889)
         */
        "subjects"?: string;
    }
    /**
     * The Entity Autocomplete component provides an input field that allows users to search for
     * entities (genes or GO terms) using the GO API.
     */
    interface GoEntityAutocomplete {
        /**
          * Category to constrain the search; by default search "gene" Other values accepted: `undefined` : search both terms and genes `gene` : will only search genes used in GO `biological%20process` : will search for GO BP terms `molecular%20function` : will search for GO MF terms `cellular%20component` : will search for GO CC terms `cellular%20component,molecular%20function,biological%20process` : will search any GO term
          * @default "gene"
         */
        "category": string;
        /**
          * Maximum number of results to show
          * @default 100
         */
        "maxResults": number;
        /**
          * Default placeholder for the autocomplete
          * @default ""
         */
        "placeholder": string;
        "value": string;
    }
    /**
     * The GO-CAM Viewer component renders a [GO-CAM](https://geneontology.org/docs/gocam-overview/) as
     * a graph of activities and their relationships. The sidebar displays a list of the activities,
     * grouped by the larger GO `biological_process` in which the activity is a part, and showing
     * additional details such as the gene product that carries out the activity and the GO
     * `cellular_component` in which the activity occurs.
     * For advanced use cases, the [legend](./gocam-viewer-legend) can be displayed separately.
     */
    interface GoGocamViewer {
        /**
          * The url used to fetch GO-CAM graphs. Any occurrence of %ID in the string will be replaced by the GO-CAM ID.
          * @default "https://api.geneontology.org/api/go-cam/%ID"
         */
        "apiUrl": string;
        /**
          * ID of the GO-CAM to be shown in this widget. If provided, the GO-CAM will automatically be fetched using this ID and the value of the `api-url` prop. If omitted, data will not automatically be fetched, but can be provided via the `setModelData` method. This may be useful if the host page already has the GO-CAM data.
         */
        "gocamId": string;
        /**
          * Center the cytoscape graph to fit the whole graph
         */
        "resetView": () => Promise<void>;
        /**
          * Define if the GO-CAM viz should capture the mouse scroll
          * @param shouldAF set to true if you want a mouse scroll to be captured by the component
         */
        "setAutoFocus": (shouldAF: any) => Promise<void>;
        /**
          * Manually supply GO-CAM data to be rendered. This will overwrite any data previously fetched using the gocamId and apiUrl props, if they were provided.
          * @param model GO-CAM object
         */
        "setModelData": (model: any) => Promise<void>;
        /**
          * Show/hide default legend
          * @default true
         */
        "showLegend": boolean;
        "toggleComplex": () => Promise<void>;
    }
    /**
     * The GO-CAM Viewer Legend component displays a legend for the relations used in the GO-CAM graph
     * display. This can be used in advanced cases where the `go-gocam-viewer` component is used with
     * the `show-legend` property set to `false`, and the legend needs to be displayed separately.
     */
    interface GoGocamViewerLegend {
    }
    /**
     * The GO-CAM Viewer Sidebar
     */
    interface GoGocamViewerSidebar {
        /**
          * BBOP Graph Handler -> GO-CAM Must be provided to build the side panel
         */
        "cam": Cam;
        "highlightActivity": (nodeId: any) => Promise<void>;
        /**
          * Passed by the parent to highlight & clear highlight nodes
         */
        "parentCy": any;
    }
    /**
     * A popover component that displays information about the web components library.
     */
    interface GoInfoPopover {
        /**
          * @default "bottom-start"
         */
        "placement": Placement;
    }
    /**
     * The Spinner component displays a loading spinner with an optional message.
     */
    interface GoSpinner {
        "message": string;
    }
}
export interface GoAnnotationRibbonStripsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGoAnnotationRibbonStripsElement;
}
export interface GoAnnotationRibbonSubjectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGoAnnotationRibbonSubjectElement;
}
export interface GoEntityAutocompleteCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGoEntityAutocompleteElement;
}
export interface GoGocamViewerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGoGocamViewerElement;
}
export interface GoGocamViewerSidebarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGoGocamViewerSidebarElement;
}
declare global {
    /**
     * The Annotation Ribbon component summarizes [GO annotation](https://geneontology.org/docs/go-annotations/)
     * as a grid of cells. Each row in the grid (called "strips") represents a subject (typically a
     * gene), and each column represents a GO term. The color of each cell indicates the relative number
     * of GO annotations for that subject to the term or one of its descendants in the ontology
     * hierarchy. The columns are additionally grouped into categories which are visually separated in
     * the display.
     * When a cell is clicked, a table of annotations is displayed below the strips. The table shows the
     * details of the annotations for the selected subject and term.
     * For advanced use cases, the individual components of the ribbon can be used separately:
     * [strips](./annotation-ribbon-strips), [table](./annotation-ribbon-table).
     */
    interface HTMLGoAnnotationRibbonElement extends Components.GoAnnotationRibbon, HTMLStencilElement {
    }
    var HTMLGoAnnotationRibbonElement: {
        prototype: HTMLGoAnnotationRibbonElement;
        new (): HTMLGoAnnotationRibbonElement;
    };
    /**
     * An individual cell in the annotation ribbon.
     */
    interface HTMLGoAnnotationRibbonCellElement extends Components.GoAnnotationRibbonCell, HTMLStencilElement {
    }
    var HTMLGoAnnotationRibbonCellElement: {
        prototype: HTMLGoAnnotationRibbonCellElement;
        new (): HTMLGoAnnotationRibbonCellElement;
    };
    interface HTMLGoAnnotationRibbonStripsElementEventMap {
        "cellClick": IRibbonCellEvent;
        "cellEnter": IRibbonCellEvent;
        "cellLeave": IRibbonCellEvent;
        "groupClick": IRibbonGroupEvent;
        "groupEnter": IRibbonGroupEvent;
        "groupLeave": IRibbonGroupEvent;
    }
    /**
     * The Annotation Ribbon Strips component displays a grid of cells. Each row in the grid represents
     * a subject (typically a gene), and each column represents a GO term. The color of each cell
     * indicates the relative number of GO annotations for that subject to the term or one of its
     * descendants in the ontology hierarchy. The columns are additionally grouped into categories
     * which are visually separated in the display.
     * Events are fired when cells or cell headers (groups) are clicked or hovered over.
     */
    interface HTMLGoAnnotationRibbonStripsElement extends Components.GoAnnotationRibbonStrips, HTMLStencilElement {
        addEventListener<K extends keyof HTMLGoAnnotationRibbonStripsElementEventMap>(type: K, listener: (this: HTMLGoAnnotationRibbonStripsElement, ev: GoAnnotationRibbonStripsCustomEvent<HTMLGoAnnotationRibbonStripsElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLGoAnnotationRibbonStripsElementEventMap>(type: K, listener: (this: HTMLGoAnnotationRibbonStripsElement, ev: GoAnnotationRibbonStripsCustomEvent<HTMLGoAnnotationRibbonStripsElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLGoAnnotationRibbonStripsElement: {
        prototype: HTMLGoAnnotationRibbonStripsElement;
        new (): HTMLGoAnnotationRibbonStripsElement;
    };
    interface HTMLGoAnnotationRibbonSubjectElementEventMap {
        "subjectClick": any;
    }
    /**
     * An individual subject in the annotation ribbon.
     */
    interface HTMLGoAnnotationRibbonSubjectElement extends Components.GoAnnotationRibbonSubject, HTMLStencilElement {
        addEventListener<K extends keyof HTMLGoAnnotationRibbonSubjectElementEventMap>(type: K, listener: (this: HTMLGoAnnotationRibbonSubjectElement, ev: GoAnnotationRibbonSubjectCustomEvent<HTMLGoAnnotationRibbonSubjectElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLGoAnnotationRibbonSubjectElementEventMap>(type: K, listener: (this: HTMLGoAnnotationRibbonSubjectElement, ev: GoAnnotationRibbonSubjectCustomEvent<HTMLGoAnnotationRibbonSubjectElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLGoAnnotationRibbonSubjectElement: {
        prototype: HTMLGoAnnotationRibbonSubjectElement;
        new (): HTMLGoAnnotationRibbonSubjectElement;
    };
    /**
     * The Annotation Ribbon Table component displays a table of GO annotations. This component does not
     * fetch data by itself, it expects the data to be provided in the `data` attribute.
     */
    interface HTMLGoAnnotationRibbonTableElement extends Components.GoAnnotationRibbonTable, HTMLStencilElement {
    }
    var HTMLGoAnnotationRibbonTableElement: {
        prototype: HTMLGoAnnotationRibbonTableElement;
        new (): HTMLGoAnnotationRibbonTableElement;
    };
    interface HTMLGoEntityAutocompleteElementEventMap {
        "itemSelected": any;
    }
    /**
     * The Entity Autocomplete component provides an input field that allows users to search for
     * entities (genes or GO terms) using the GO API.
     */
    interface HTMLGoEntityAutocompleteElement extends Components.GoEntityAutocomplete, HTMLStencilElement {
        addEventListener<K extends keyof HTMLGoEntityAutocompleteElementEventMap>(type: K, listener: (this: HTMLGoEntityAutocompleteElement, ev: GoEntityAutocompleteCustomEvent<HTMLGoEntityAutocompleteElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLGoEntityAutocompleteElementEventMap>(type: K, listener: (this: HTMLGoEntityAutocompleteElement, ev: GoEntityAutocompleteCustomEvent<HTMLGoEntityAutocompleteElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLGoEntityAutocompleteElement: {
        prototype: HTMLGoEntityAutocompleteElement;
        new (): HTMLGoEntityAutocompleteElement;
    };
    interface HTMLGoGocamViewerElementEventMap {
        "nodeOver": any;
        "nodeOut": any;
        "nodeClick": any;
        "layoutChange": any;
    }
    /**
     * The GO-CAM Viewer component renders a [GO-CAM](https://geneontology.org/docs/gocam-overview/) as
     * a graph of activities and their relationships. The sidebar displays a list of the activities,
     * grouped by the larger GO `biological_process` in which the activity is a part, and showing
     * additional details such as the gene product that carries out the activity and the GO
     * `cellular_component` in which the activity occurs.
     * For advanced use cases, the [legend](./gocam-viewer-legend) can be displayed separately.
     */
    interface HTMLGoGocamViewerElement extends Components.GoGocamViewer, HTMLStencilElement {
        addEventListener<K extends keyof HTMLGoGocamViewerElementEventMap>(type: K, listener: (this: HTMLGoGocamViewerElement, ev: GoGocamViewerCustomEvent<HTMLGoGocamViewerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLGoGocamViewerElementEventMap>(type: K, listener: (this: HTMLGoGocamViewerElement, ev: GoGocamViewerCustomEvent<HTMLGoGocamViewerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLGoGocamViewerElement: {
        prototype: HTMLGoGocamViewerElement;
        new (): HTMLGoGocamViewerElement;
    };
    /**
     * The GO-CAM Viewer Legend component displays a legend for the relations used in the GO-CAM graph
     * display. This can be used in advanced cases where the `go-gocam-viewer` component is used with
     * the `show-legend` property set to `false`, and the legend needs to be displayed separately.
     */
    interface HTMLGoGocamViewerLegendElement extends Components.GoGocamViewerLegend, HTMLStencilElement {
    }
    var HTMLGoGocamViewerLegendElement: {
        prototype: HTMLGoGocamViewerLegendElement;
        new (): HTMLGoGocamViewerLegendElement;
    };
    interface HTMLGoGocamViewerSidebarElementEventMap {
        "selectChanged": any;
    }
    /**
     * The GO-CAM Viewer Sidebar
     */
    interface HTMLGoGocamViewerSidebarElement extends Components.GoGocamViewerSidebar, HTMLStencilElement {
        addEventListener<K extends keyof HTMLGoGocamViewerSidebarElementEventMap>(type: K, listener: (this: HTMLGoGocamViewerSidebarElement, ev: GoGocamViewerSidebarCustomEvent<HTMLGoGocamViewerSidebarElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLGoGocamViewerSidebarElementEventMap>(type: K, listener: (this: HTMLGoGocamViewerSidebarElement, ev: GoGocamViewerSidebarCustomEvent<HTMLGoGocamViewerSidebarElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLGoGocamViewerSidebarElement: {
        prototype: HTMLGoGocamViewerSidebarElement;
        new (): HTMLGoGocamViewerSidebarElement;
    };
    /**
     * A popover component that displays information about the web components library.
     */
    interface HTMLGoInfoPopoverElement extends Components.GoInfoPopover, HTMLStencilElement {
    }
    var HTMLGoInfoPopoverElement: {
        prototype: HTMLGoInfoPopoverElement;
        new (): HTMLGoInfoPopoverElement;
    };
    /**
     * The Spinner component displays a loading spinner with an optional message.
     */
    interface HTMLGoSpinnerElement extends Components.GoSpinner, HTMLStencilElement {
    }
    var HTMLGoSpinnerElement: {
        prototype: HTMLGoSpinnerElement;
        new (): HTMLGoSpinnerElement;
    };
    interface HTMLElementTagNameMap {
        "go-annotation-ribbon": HTMLGoAnnotationRibbonElement;
        "go-annotation-ribbon-cell": HTMLGoAnnotationRibbonCellElement;
        "go-annotation-ribbon-strips": HTMLGoAnnotationRibbonStripsElement;
        "go-annotation-ribbon-subject": HTMLGoAnnotationRibbonSubjectElement;
        "go-annotation-ribbon-table": HTMLGoAnnotationRibbonTableElement;
        "go-entity-autocomplete": HTMLGoEntityAutocompleteElement;
        "go-gocam-viewer": HTMLGoGocamViewerElement;
        "go-gocam-viewer-legend": HTMLGoGocamViewerLegendElement;
        "go-gocam-viewer-sidebar": HTMLGoGocamViewerSidebarElement;
        "go-info-popover": HTMLGoInfoPopoverElement;
        "go-spinner": HTMLGoSpinnerElement;
    }
}
declare namespace LocalJSX {
    /**
     * The Annotation Ribbon component summarizes [GO annotation](https://geneontology.org/docs/go-annotations/)
     * as a grid of cells. Each row in the grid (called "strips") represents a subject (typically a
     * gene), and each column represents a GO term. The color of each cell indicates the relative number
     * of GO annotations for that subject to the term or one of its descendants in the ontology
     * hierarchy. The columns are additionally grouped into categories which are visually separated in
     * the display.
     * When a cell is clicked, a table of annotations is displayed below the strips. The table shows the
     * details of the annotations for the selected subject and term.
     * For advanced use cases, the individual components of the ribbon can be used separately:
     * [strips](./annotation-ribbon-strips), [table](./annotation-ribbon-table).
     */
    interface GoAnnotationRibbon {
        /**
          * Labels used with annotation counts.
          * @default "annotation,annotations"
         */
        "annotationLabels"?: string;
        /**
          * If `true`, show only two colors (`minColor` and `maxColor`) to indicate the values of a cell. Otherwise, the color of a cell will be interpolated between `minColor` and `maxColor` based on the number of annotations or classes.
          * @default false
         */
        "binaryColor"?: boolean;
        /**
          * Labels used with class counts.
          * @default "term,terms"
         */
        "classLabels"?: string;
        /**
          * Whether to color cells by annotations or classes.
          * @default "annotations"
         */
        "colorBy"?: ColorByOption;
        /**
          * If true, will exclude the protein binding GO term (GO:0005515) from the table
          * @default true
         */
        "excludeProteinBinding"?: boolean;
        /**
          * Filter rows based on the presence of one or more values in a given column The filtering will be based on cell label or id Example: filter-by="evidence:ISS,ISO or multi-step filters: filter-by:evidence:ISS,ISO;term:xxx" Note: if value is "", remove any filtering
         */
        "filterBy"?: string;
        /**
          * If true, the table will filter out associations that are cross-aspect
          * @default true
         */
        "filterCrossAspect"?: boolean;
        /**
          * Comma-separated list of reference prefixes to filter include
          * @default "PMID:,DOI:,GO_REF:,Reactome:"
         */
        "filterReference"?: string;
        /**
          * Using this parameter, the table rows can bee grouped based on column ids A multiple step grouping is possible by using a ";" between groups The grouping applies before the ordering Example: hid-1,hid-3 OR hid-1,hid-3;hid-2 Note: if value is "", remove any grouping
          * @default "term,qualifier"
         */
        "groupBy"?: string;
        /**
          * If `true`, the group labels are clickable and will trigger the `groupClick` event
          * @default true
         */
        "groupClickable"?: boolean;
        /**
          * Maximum size of group labels in characters.
          * @default 60
         */
        "groupMaxLabelSize"?: number;
        /**
          * Used to hide specific column of the table
          * @default "qualifier"
         */
        "hideColumns"?: string;
        /**
          * Color of cells with the most number of annotations or classes.
          * @default "24,73,180"
         */
        "maxColor"?: string;
        /**
          * Maximum number of annotations or classes before `maxColor` is applied.
          * @default 48
         */
        "maxHeatLevel"?: number;
        /**
          * Color of cells with the least number of annotations or classes.
          * @default "255,255,255"
         */
        "minColor"?: string;
        /**
          * This is used to sort the table depending of a column The column cells must be single values The ordering applies after the grouping Note: if value is "", remove any ordering
          * @default "term"
         */
        "orderBy"?: string;
        /**
          * URL for the API endpoint to fetch the ribbon data when subjects are provided.
          * @default "https://api.geneontology.org/api/ontology/ribbon/"
         */
        "ribbonDataApiEndpoint"?: string;
        /**
          * If no value is provided, the ribbon will load without any group selected. If a value is provided, the ribbon will show the requested group as selected The value should be the id of the group to be selected
         */
        "selected"?: string;
        /**
          * Selection mode for the ribbon cells.
          * @default "cell"
         */
        "selectionMode"?: SelectionModeOption;
        /**
          * If `true`, show the "all annotations" group.
          * @default true
         */
        "showAllAnnotationsGroup"?: boolean;
        /**
          * If `true`, show the "Other" group for each category.
          * @default true
         */
        "showOtherGroup"?: boolean;
        /**
          * Base URL used when rendering subject label links.
          * @default "https://amigo.geneontology.org/amigo/gene_product/"
         */
        "subjectBaseUrl"?: string;
        /**
          * If `true`, clicking a subject label will open the link in a new tab.
          * @default true
         */
        "subjectOpenNewTab"?: boolean;
        /**
          * Position subject labels.
          * @default "left"
         */
        "subjectPosition"?: SubjectPositionOption;
        /**
          * Comma-separated list of gene IDs (e.g. RGD:620474,RGD:3889)
         */
        "subjects"?: string;
        /**
          * Name of the GO subset used for grouping annotations.
          * @default "goslim_agr"
         */
        "subset"?: string;
        /**
          * URL for the API endpoint to fetch the table data when a group is selected. This is used to fetch the annotations for the selected group and subjects.
          * @default "https://api.geneontology.org/api/bioentityset/slimmer/function"
         */
        "tableDataApiEndpoint"?: string;
    }
    /**
     * An individual cell in the annotation ribbon.
     */
    interface GoAnnotationRibbonCell {
        /**
          * @default "annotation,annotations"
         */
        "annotationLabels"?: string;
        /**
          * If set to true, won't show any color and can not be hovered or selected This is used for group that can not have annotation for a given subject
          * @default true
         */
        "available"?: boolean;
        /**
          * @default false
         */
        "binaryColor"?: boolean;
        /**
          * @default "term,terms"
         */
        "classLabels"?: string;
        /**
          * @default "annotations"
         */
        "colorBy"?: ColorByOption;
        "group"?: IRibbonGroup;
        /**
          * @default false
         */
        "hovered"?: boolean;
        /**
          * @default "24,73,180"
         */
        "maxColor"?: string;
        /**
          * @default 48
         */
        "maxHeatLevel"?: number;
        /**
          * @default "255,255,255"
         */
        "minColor"?: string;
        /**
          * @default false
         */
        "selected"?: boolean;
        "subject"?: IRibbonSubject;
    }
    /**
     * The Annotation Ribbon Strips component displays a grid of cells. Each row in the grid represents
     * a subject (typically a gene), and each column represents a GO term. The color of each cell
     * indicates the relative number of GO annotations for that subject to the term or one of its
     * descendants in the ontology hierarchy. The columns are additionally grouped into categories
     * which are visually separated in the display.
     * Events are fired when cells or cell headers (groups) are clicked or hovered over.
     */
    interface GoAnnotationRibbonStrips {
        /**
          * Labels used with annotation counts.
          * @default "annotation,annotations"
         */
        "annotationLabels"?: string;
        /**
          * URL for the API endpoint to fetch the ribbon data when subjects are provided.
          * @default "https://api.geneontology.org/api/ontology/ribbon/"
         */
        "apiEndpoint"?: string;
        /**
          * If `true`, show only two colors (`minColor` and `maxColor`) to indicate the values of a cell. Otherwise, the color of a cell will be interpolated between `minColor` and `maxColor` based on the number of annotations or classes.
          * @default false
         */
        "binaryColor"?: boolean;
        /**
          * Labels used with class counts.
          * @default "term,terms"
         */
        "classLabels"?: string;
        /**
          * Whether to color cells by annotations or classes.
          * @default "annotations"
         */
        "colorBy"?: ColorByOption;
        /**
          * If `true`, the group labels are clickable and will trigger the `groupClick` event
          * @default true
         */
        "groupClickable"?: boolean;
        /**
          * Maximum size of group labels in characters.
          * @default 60
         */
        "groupMaxLabelSize"?: number;
        /**
          * Color of cells with the most number of annotations or classes.
          * @default "24,73,180"
         */
        "maxColor"?: string;
        /**
          * Maximum number of annotations or classes before `maxColor` is applied.
          * @default 48
         */
        "maxHeatLevel"?: number;
        /**
          * Color of cells with the least number of annotations or classes.
          * @default "255,255,255"
         */
        "minColor"?: string;
        /**
          * Emitted when a ribbon cell is clicked.
         */
        "onCellClick"?: (event: GoAnnotationRibbonStripsCustomEvent<IRibbonCellEvent>) => void;
        /**
          * Emitted when the mouse enters a ribbon cell.
         */
        "onCellEnter"?: (event: GoAnnotationRibbonStripsCustomEvent<IRibbonCellEvent>) => void;
        /**
          * Emitted when the mouse leaves a ribbon cell.
         */
        "onCellLeave"?: (event: GoAnnotationRibbonStripsCustomEvent<IRibbonCellEvent>) => void;
        /**
          * Emitted when a group label is clicked.
         */
        "onGroupClick"?: (event: GoAnnotationRibbonStripsCustomEvent<IRibbonGroupEvent>) => void;
        /**
          * Emitted when the mouse enters a group label.
         */
        "onGroupEnter"?: (event: GoAnnotationRibbonStripsCustomEvent<IRibbonGroupEvent>) => void;
        /**
          * Emitted when the mouse leaves a group label.
         */
        "onGroupLeave"?: (event: GoAnnotationRibbonStripsCustomEvent<IRibbonGroupEvent>) => void;
        /**
          * If no value is provided, the ribbon will load without any group selected. If a value is provided, the ribbon will show the requested group as selected The value should be the id of the group to be selected
         */
        "selected"?: string;
        /**
          * Selection mode for the ribbon cells.
          * @default "cell"
         */
        "selectionMode"?: SelectionModeOption;
        /**
          * If `true`, show the "all annotations" group.
          * @default true
         */
        "showAllAnnotationsGroup"?: boolean;
        /**
          * If `true`, show the "Other" group for each category.
          * @default false
         */
        "showOtherGroup"?: boolean;
        /**
          * Base URL used when rendering subject label links.
          * @default "https://amigo.geneontology.org/amigo/gene_product/"
         */
        "subjectBaseUrl"?: string;
        /**
          * If `true`, clicking a subject label will open the link in a new tab.
          * @default true
         */
        "subjectOpenNewTab"?: boolean;
        /**
          * Position subject labels.
          * @default "left"
         */
        "subjectPosition"?: SubjectPositionOption;
        /**
          * Comma-separated list of gene IDs (e.g. RGD:620474,RGD:3889)
         */
        "subjects"?: string;
        /**
          * Name of the GO subset used for grouping annotations.
          * @default "goslim_agr"
         */
        "subset"?: string;
    }
    /**
     * An individual subject in the annotation ribbon.
     */
    interface GoAnnotationRibbonSubject {
        /**
          * @default true
         */
        "newTab"?: boolean;
        /**
          * This event is triggered whenever a subject label is clicked Can call preventDefault() to avoid the default behavior (opening the linked subject page)
         */
        "onSubjectClick"?: (event: GoAnnotationRibbonSubjectCustomEvent<any>) => void;
        "subject": IRibbonSubject;
        /**
          * @default "/"
         */
        "subjectBaseURL"?: string;
    }
    /**
     * The Annotation Ribbon Table component displays a table of GO annotations. This component does not
     * fetch data by itself, it expects the data to be provided in the `data` attribute.
     */
    interface GoAnnotationRibbonTable {
        /**
          * URL for the API endpoint to fetch the table data when subjects and slims are provided.
          * @default "https://api.geneontology.org/api/bioentityset/slimmer/function"
         */
        "apiEndpoint"?: string;
        /**
          * If true, will exclude the protein binding GO term (GO:0005515) from the table
          * @default true
         */
        "excludeProteinBinding"?: boolean;
        /**
          * Filter rows based on the presence of one or more values in a given column The filtering will be based on cell label or id Example: filter-by="evidence:ISS,ISO or multi-step filters: filter-by:evidence:ISS,ISO;term:xxx"
         */
        "filterBy"?: string;
        /**
          * Comma-separated list of reference prefixes to filter include
          * @default "PMID:,DOI:,GO_REF:,Reactome:"
         */
        "filterReference"?: string;
        /**
          * Using this parameter, the table rows can bee grouped based on column ids A multiple step grouping is possible by using a ";" between groups The grouping applies before the ordering Example: hid-1,hid-3 OR hid-1,hid-3;hid-2
         */
        "groupBy"?: string;
        /**
          * Used to hide specific column of the table
         */
        "hideColumns"?: string;
        /**
          * This is used to sort the table depending of a column The column cells must be single values The ordering applies after the grouping
         */
        "orderBy"?: string;
        /**
          * Comma-separate list of GO term IDs (e.g. GO:0003674,GO:0008150,GO:0005575)
         */
        "slims"?: string;
        /**
          * Comma-separated list of gene IDs (e.g. RGD:620474,RGD:3889)
         */
        "subjects"?: string;
    }
    /**
     * The Entity Autocomplete component provides an input field that allows users to search for
     * entities (genes or GO terms) using the GO API.
     */
    interface GoEntityAutocomplete {
        /**
          * Category to constrain the search; by default search "gene" Other values accepted: `undefined` : search both terms and genes `gene` : will only search genes used in GO `biological%20process` : will search for GO BP terms `molecular%20function` : will search for GO MF terms `cellular%20component` : will search for GO CC terms `cellular%20component,molecular%20function,biological%20process` : will search any GO term
          * @default "gene"
         */
        "category"?: string;
        /**
          * Maximum number of results to show
          * @default 100
         */
        "maxResults"?: number;
        /**
          * Event triggered whenever an item is selected from the autocomplete
         */
        "onItemSelected"?: (event: GoEntityAutocompleteCustomEvent<any>) => void;
        /**
          * Default placeholder for the autocomplete
          * @default ""
         */
        "placeholder"?: string;
        "value"?: string;
    }
    /**
     * The GO-CAM Viewer component renders a [GO-CAM](https://geneontology.org/docs/gocam-overview/) as
     * a graph of activities and their relationships. The sidebar displays a list of the activities,
     * grouped by the larger GO `biological_process` in which the activity is a part, and showing
     * additional details such as the gene product that carries out the activity and the GO
     * `cellular_component` in which the activity occurs.
     * For advanced use cases, the [legend](./gocam-viewer-legend) can be displayed separately.
     */
    interface GoGocamViewer {
        /**
          * The url used to fetch GO-CAM graphs. Any occurrence of %ID in the string will be replaced by the GO-CAM ID.
          * @default "https://api.geneontology.org/api/go-cam/%ID"
         */
        "apiUrl"?: string;
        /**
          * ID of the GO-CAM to be shown in this widget. If provided, the GO-CAM will automatically be fetched using this ID and the value of the `api-url` prop. If omitted, data will not automatically be fetched, but can be provided via the `setModelData` method. This may be useful if the host page already has the GO-CAM data.
         */
        "gocamId"?: string;
        "onLayoutChange"?: (event: GoGocamViewerCustomEvent<any>) => void;
        "onNodeClick"?: (event: GoGocamViewerCustomEvent<any>) => void;
        "onNodeOut"?: (event: GoGocamViewerCustomEvent<any>) => void;
        "onNodeOver"?: (event: GoGocamViewerCustomEvent<any>) => void;
        /**
          * Show/hide default legend
          * @default true
         */
        "showLegend"?: boolean;
    }
    /**
     * The GO-CAM Viewer Legend component displays a legend for the relations used in the GO-CAM graph
     * display. This can be used in advanced cases where the `go-gocam-viewer` component is used with
     * the `show-legend` property set to `false`, and the legend needs to be displayed separately.
     */
    interface GoGocamViewerLegend {
    }
    /**
     * The GO-CAM Viewer Sidebar
     */
    interface GoGocamViewerSidebar {
        /**
          * BBOP Graph Handler -> GO-CAM Must be provided to build the side panel
         */
        "cam"?: Cam;
        "onSelectChanged"?: (event: GoGocamViewerSidebarCustomEvent<any>) => void;
        /**
          * Passed by the parent to highlight & clear highlight nodes
         */
        "parentCy"?: any;
    }
    /**
     * A popover component that displays information about the web components library.
     */
    interface GoInfoPopover {
        /**
          * @default "bottom-start"
         */
        "placement"?: Placement;
    }
    /**
     * The Spinner component displays a loading spinner with an optional message.
     */
    interface GoSpinner {
        "message"?: string;
    }
    interface IntrinsicElements {
        "go-annotation-ribbon": GoAnnotationRibbon;
        "go-annotation-ribbon-cell": GoAnnotationRibbonCell;
        "go-annotation-ribbon-strips": GoAnnotationRibbonStrips;
        "go-annotation-ribbon-subject": GoAnnotationRibbonSubject;
        "go-annotation-ribbon-table": GoAnnotationRibbonTable;
        "go-entity-autocomplete": GoEntityAutocomplete;
        "go-gocam-viewer": GoGocamViewer;
        "go-gocam-viewer-legend": GoGocamViewerLegend;
        "go-gocam-viewer-sidebar": GoGocamViewerSidebar;
        "go-info-popover": GoInfoPopover;
        "go-spinner": GoSpinner;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            /**
             * The Annotation Ribbon component summarizes [GO annotation](https://geneontology.org/docs/go-annotations/)
             * as a grid of cells. Each row in the grid (called "strips") represents a subject (typically a
             * gene), and each column represents a GO term. The color of each cell indicates the relative number
             * of GO annotations for that subject to the term or one of its descendants in the ontology
             * hierarchy. The columns are additionally grouped into categories which are visually separated in
             * the display.
             * When a cell is clicked, a table of annotations is displayed below the strips. The table shows the
             * details of the annotations for the selected subject and term.
             * For advanced use cases, the individual components of the ribbon can be used separately:
             * [strips](./annotation-ribbon-strips), [table](./annotation-ribbon-table).
             */
            "go-annotation-ribbon": LocalJSX.GoAnnotationRibbon & JSXBase.HTMLAttributes<HTMLGoAnnotationRibbonElement>;
            /**
             * An individual cell in the annotation ribbon.
             */
            "go-annotation-ribbon-cell": LocalJSX.GoAnnotationRibbonCell & JSXBase.HTMLAttributes<HTMLGoAnnotationRibbonCellElement>;
            /**
             * The Annotation Ribbon Strips component displays a grid of cells. Each row in the grid represents
             * a subject (typically a gene), and each column represents a GO term. The color of each cell
             * indicates the relative number of GO annotations for that subject to the term or one of its
             * descendants in the ontology hierarchy. The columns are additionally grouped into categories
             * which are visually separated in the display.
             * Events are fired when cells or cell headers (groups) are clicked or hovered over.
             */
            "go-annotation-ribbon-strips": LocalJSX.GoAnnotationRibbonStrips & JSXBase.HTMLAttributes<HTMLGoAnnotationRibbonStripsElement>;
            /**
             * An individual subject in the annotation ribbon.
             */
            "go-annotation-ribbon-subject": LocalJSX.GoAnnotationRibbonSubject & JSXBase.HTMLAttributes<HTMLGoAnnotationRibbonSubjectElement>;
            /**
             * The Annotation Ribbon Table component displays a table of GO annotations. This component does not
             * fetch data by itself, it expects the data to be provided in the `data` attribute.
             */
            "go-annotation-ribbon-table": LocalJSX.GoAnnotationRibbonTable & JSXBase.HTMLAttributes<HTMLGoAnnotationRibbonTableElement>;
            /**
             * The Entity Autocomplete component provides an input field that allows users to search for
             * entities (genes or GO terms) using the GO API.
             */
            "go-entity-autocomplete": LocalJSX.GoEntityAutocomplete & JSXBase.HTMLAttributes<HTMLGoEntityAutocompleteElement>;
            /**
             * The GO-CAM Viewer component renders a [GO-CAM](https://geneontology.org/docs/gocam-overview/) as
             * a graph of activities and their relationships. The sidebar displays a list of the activities,
             * grouped by the larger GO `biological_process` in which the activity is a part, and showing
             * additional details such as the gene product that carries out the activity and the GO
             * `cellular_component` in which the activity occurs.
             * For advanced use cases, the [legend](./gocam-viewer-legend) can be displayed separately.
             */
            "go-gocam-viewer": LocalJSX.GoGocamViewer & JSXBase.HTMLAttributes<HTMLGoGocamViewerElement>;
            /**
             * The GO-CAM Viewer Legend component displays a legend for the relations used in the GO-CAM graph
             * display. This can be used in advanced cases where the `go-gocam-viewer` component is used with
             * the `show-legend` property set to `false`, and the legend needs to be displayed separately.
             */
            "go-gocam-viewer-legend": LocalJSX.GoGocamViewerLegend & JSXBase.HTMLAttributes<HTMLGoGocamViewerLegendElement>;
            /**
             * The GO-CAM Viewer Sidebar
             */
            "go-gocam-viewer-sidebar": LocalJSX.GoGocamViewerSidebar & JSXBase.HTMLAttributes<HTMLGoGocamViewerSidebarElement>;
            /**
             * A popover component that displays information about the web components library.
             */
            "go-info-popover": LocalJSX.GoInfoPopover & JSXBase.HTMLAttributes<HTMLGoInfoPopoverElement>;
            /**
             * The Spinner component displays a loading spinner with an optional message.
             */
            "go-spinner": LocalJSX.GoSpinner & JSXBase.HTMLAttributes<HTMLGoSpinnerElement>;
        }
    }
}
